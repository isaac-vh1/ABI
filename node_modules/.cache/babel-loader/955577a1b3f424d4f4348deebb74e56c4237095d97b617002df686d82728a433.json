{"ast":null,"code":"var _jsxFileName = \"/Users/isaacvanhorn/Downloads/Code/Organization for ABI/src/Calendar/Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst DnDCalendar = withDragAndDrop(Calendar);\n_c = DnDCalendar;\nexport default function CalendarContainer() {\n  _s();\n  // Scheduled events on the calendar\n  const [events, setEvents] = useState([{\n    id: 1,\n    title: 'Existing Event',\n    start: new Date(),\n    end: new Date(new Date().setHours(new Date().getHours() + 1))\n  }]);\n\n  // RBC date & view state\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [currentView, setCurrentView] = useState(Views.MONTH);\n\n  // Unscheduled items in the sidebar\n  // Each has a duration (in hours) instead of explicit times\n  const [unscheduledEvents] = useState([{\n    id: 101,\n    invoice: 'INV-001',\n    title: 'Cleaning Service',\n    durationHours: 1 // 1 hour\n  }, {\n    id: 102,\n    invoice: 'INV-002',\n    title: 'Maintenance',\n    durationHours: 2 // 2 hours\n  }, {\n    id: 103,\n    invoice: 'INV-003',\n    title: 'Consultation',\n    durationHours: 3 // 3 hours\n  }]);\n\n  // When an existing calendar event is dragged/rescheduled\n  const onEventDrop = ({\n    event,\n    start,\n    end\n  }) => {\n    const updatedEvents = events.map(evt => evt.id === event.id ? {\n      ...evt,\n      start,\n      end\n    } : evt);\n    setEvents(updatedEvents);\n  };\n\n  // When an unscheduled event is dropped from the sidebar\n  // We'll build a new event, using `start + durationHours`.\n  const onDropFromSidebar = (start, _end, draggedEvent) => {\n    const startDate = new Date(start);\n\n    // Convert 'durationHours' to an actual end time\n    const hours = parseInt(draggedEvent.durationHours, 10) || 1;\n    const endDate = new Date(startDate);\n    endDate.setHours(endDate.getHours() + hours);\n    const newEvent = {\n      id: new Date().getTime(),\n      title: `${draggedEvent.title} [${draggedEvent.invoice}]`,\n      start: startDate,\n      end: endDate\n    };\n    setEvents([...events, newEvent]);\n  };\n\n  // Clicking a day in Month view => jump to that day in Week view\n  const handleSelectSlot = slotInfo => {\n    setCurrentDate(slotInfo.start);\n    setCurrentView(Views.WEEK);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '180px',\n        backgroundColor: '#333',\n        color: '#fff',\n        padding: '10px',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textAlign: 'center',\n          marginBottom: '15px'\n        },\n        children: \"Unscheduled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), unscheduledEvents.map(evt => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: '#444',\n          marginBottom: '10px',\n          padding: '10px',\n          borderRadius: '5px',\n          cursor: 'move'\n        },\n        draggable: true,\n        onDragStart: e => {\n          // RBC expects you to set data with a known key. We'll use 'draggedEvent'\n          e.dataTransfer.setData('draggedEvent', JSON.stringify(evt));\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: evt.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Invoice: \", evt.invoice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Duration: \", evt.durationHours, \" hr(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, evt.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        padding: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(DnDCalendar, {\n        localizer: localizer,\n        events: events\n        // Control date & view\n        ,\n        date: currentDate,\n        view: currentView,\n        onNavigate: date => setCurrentDate(date),\n        onView: view => setCurrentView(view)\n        // Which views to show\n        ,\n        defaultView: Views.MONTH,\n        views: [Views.MONTH, Views.WEEK, Views.DAY],\n        selectable: true\n        // DnD from RBC\n        ,\n        onEventDrop: onEventDrop\n        // RBC will call this after drop\n        ,\n        onDropFromOutside: ({\n          start,\n          end,\n          draggedEvent\n        }) => onDropFromSidebar(start, end, draggedEvent)\n        // Tells RBC how to interpret the dragged item\n        ,\n        dragFromOutsideItem: data => data,\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        style: {\n          minHeight: '80vh',\n          margin: '0 auto'\n        }\n        // Click a day in Month => switch to Week on that day\n        ,\n        onSelectSlot: handleSelectSlot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarContainer, \"mhaNSco9RFJ7kNOrE2qz+0wQLvA=\");\n_c2 = CalendarContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"DnDCalendar\");\n$RefreshReg$(_c2, \"CalendarContainer\");","map":{"version":3,"names":["React","useState","Calendar","Views","momentLocalizer","moment","withDragAndDrop","jsxDEV","_jsxDEV","localizer","DnDCalendar","_c","CalendarContainer","_s","events","setEvents","id","title","start","Date","end","setHours","getHours","currentDate","setCurrentDate","currentView","setCurrentView","MONTH","unscheduledEvents","invoice","durationHours","onEventDrop","event","updatedEvents","map","evt","onDropFromSidebar","_end","draggedEvent","startDate","hours","parseInt","endDate","newEvent","getTime","handleSelectSlot","slotInfo","WEEK","style","display","children","width","backgroundColor","color","padding","minHeight","textAlign","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","borderRadius","cursor","draggable","onDragStart","e","dataTransfer","setData","JSON","stringify","fontWeight","flex","date","view","onNavigate","onView","defaultView","views","DAY","selectable","onDropFromOutside","dragFromOutsideItem","data","startAccessor","endAccessor","margin","onSelectSlot","_c2","$RefreshReg$"],"sources":["/Users/isaacvanhorn/Downloads/Code/Organization for ABI/src/Calendar/Calendar.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\n\nconst localizer = momentLocalizer(moment);\nconst DnDCalendar = withDragAndDrop(Calendar);\n\nexport default function CalendarContainer() {\n  // Scheduled events on the calendar\n  const [events, setEvents] = useState([\n    {\n      id: 1,\n      title: 'Existing Event',\n      start: new Date(),\n      end: new Date(new Date().setHours(new Date().getHours() + 1)),\n    },\n  ]);\n\n  // RBC date & view state\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [currentView, setCurrentView] = useState(Views.MONTH);\n\n  // Unscheduled items in the sidebar\n  // Each has a duration (in hours) instead of explicit times\n  const [unscheduledEvents] = useState([\n    {\n      id: 101,\n      invoice: 'INV-001',\n      title: 'Cleaning Service',\n      durationHours: 1, // 1 hour\n    },\n    {\n      id: 102,\n      invoice: 'INV-002',\n      title: 'Maintenance',\n      durationHours: 2, // 2 hours\n    },\n    {\n      id: 103,\n      invoice: 'INV-003',\n      title: 'Consultation',\n      durationHours: 3, // 3 hours\n    },\n  ]);\n\n  // When an existing calendar event is dragged/rescheduled\n  const onEventDrop = ({ event, start, end }) => {\n    const updatedEvents = events.map((evt) =>\n      evt.id === event.id ? { ...evt, start, end } : evt\n    );\n    setEvents(updatedEvents);\n  };\n\n  // When an unscheduled event is dropped from the sidebar\n  // We'll build a new event, using `start + durationHours`.\n  const onDropFromSidebar = (start, _end, draggedEvent) => {\n    const startDate = new Date(start);\n\n    // Convert 'durationHours' to an actual end time\n    const hours = parseInt(draggedEvent.durationHours, 10) || 1;\n    const endDate = new Date(startDate);\n    endDate.setHours(endDate.getHours() + hours);\n\n    const newEvent = {\n      id: new Date().getTime(),\n      title: `${draggedEvent.title} [${draggedEvent.invoice}]`,\n      start: startDate,\n      end: endDate,\n    };\n    setEvents([...events, newEvent]);\n  };\n\n  // Clicking a day in Month view => jump to that day in Week view\n  const handleSelectSlot = (slotInfo) => {\n    setCurrentDate(slotInfo.start);\n    setCurrentView(Views.WEEK);\n  };\n\n  return (\n    <div style={{ display: 'flex' }}>\n      {/* ===== Sidebar (smaller width) ===== */}\n      <div\n        style={{\n          width: '180px',\n          backgroundColor: '#333',\n          color: '#fff',\n          padding: '10px',\n          minHeight: '100vh',\n        }}\n      >\n        <h2 style={{ textAlign: 'center', marginBottom: '15px' }}>Unscheduled</h2>\n        {unscheduledEvents.map((evt) => (\n          <div\n            key={evt.id}\n            style={{\n              backgroundColor: '#444',\n              marginBottom: '10px',\n              padding: '10px',\n              borderRadius: '5px',\n              cursor: 'move',\n            }}\n            draggable\n            onDragStart={(e) => {\n              // RBC expects you to set data with a known key. We'll use 'draggedEvent'\n              e.dataTransfer.setData('draggedEvent', JSON.stringify(evt));\n            }}\n          >\n            <div style={{ fontWeight: 'bold' }}>{evt.title}</div>\n            <div>Invoice: {evt.invoice}</div>\n            <div>Duration: {evt.durationHours} hr(s)</div>\n          </div>\n        ))}\n      </div>\n\n      {/* ===== Main Calendar ===== */}\n      <div style={{ flex: 1, padding: '10px' }}>\n        <DnDCalendar\n          localizer={localizer}\n          events={events}\n          // Control date & view\n          date={currentDate}\n          view={currentView}\n          onNavigate={(date) => setCurrentDate(date)}\n          onView={(view) => setCurrentView(view)}\n          // Which views to show\n          defaultView={Views.MONTH}\n          views={[Views.MONTH, Views.WEEK, Views.DAY]}\n          selectable\n          // DnD from RBC\n          onEventDrop={onEventDrop}\n          // RBC will call this after drop\n          onDropFromOutside={({ start, end, draggedEvent }) =>\n            onDropFromSidebar(start, end, draggedEvent)\n          }\n          // Tells RBC how to interpret the dragged item\n          dragFromOutsideItem={(data) => data}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          style={{ minHeight: '80vh', margin: '0 auto' }}\n          // Click a day in Month => switch to Week on that day\n          onSelectSlot={handleSelectSlot}\n        />\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}