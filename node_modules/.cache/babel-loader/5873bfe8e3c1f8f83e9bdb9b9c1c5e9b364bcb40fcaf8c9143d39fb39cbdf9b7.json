{"ast":null,"code":"var _jsxFileName = \"/Users/isaacvanhorn/Downloads/Code/Organization for ABI/src/Calendar/Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n// If using drag-and-drop add-on CSS\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\n\n// For built-in DnD (React Big Calendar)\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst DnDCalendar = withDragAndDrop(Calendar);\n_c = DnDCalendar;\nexport default function CalendarContainer() {\n  _s();\n  const [events, setEvents] = useState([{\n    id: 1,\n    title: 'Existing Event',\n    start: new Date(),\n    end: new Date(new Date().setHours(new Date().getHours() + 1))\n  }]);\n\n  // Handle event drop/resizing if needed\n  const onEventDrop = ({\n    event,\n    start,\n    end,\n    allDay\n  }) => {\n    // Update event in state\n    const updatedEvents = events.map(evt => {\n      if (evt.id === event.id) {\n        return {\n          ...evt,\n          start,\n          end\n        };\n      }\n      return evt;\n    });\n    setEvents(updatedEvents);\n  };\n\n  // Handle new events dropped from sidebar\n  const onDropFromSidebar = (start, end, draggedEvent) => {\n    const newEvent = {\n      id: new Date().getTime(),\n      title: draggedEvent.title,\n      start,\n      end\n    };\n    setEvents([...events, newEvent]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '80vh',\n      margin: '0 auto'\n    },\n    children: /*#__PURE__*/_jsxDEV(DnDCalendar, {\n      localizer: localizer,\n      events: events,\n      defaultView: Views.MONTH,\n      views: [Views.MONTH, Views.WEEK],\n      selectable: true,\n      onEventDrop: onEventDrop\n      // For resizing events, if desired:\n      // onEventResize={onEventDrop}\n      ,\n      onDropFromOutside: e => {\n        const {\n          start,\n          end,\n          draggedEvent\n        } = e;\n        onDropFromSidebar(start, end, draggedEvent);\n      }\n      // Must set this prop to true if using onDropFromOutside\n      ,\n      dragFromOutsideItem: item => item\n      // Adjust this prop to show the week by default if you want:\n      // defaultView={Views.WEEK}\n      ,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      style: {\n        minHeight: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarContainer, \"m8+o8+wrcC8DRfC16rD94XJ3FhU=\");\n_c2 = CalendarContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"DnDCalendar\");\n$RefreshReg$(_c2, \"CalendarContainer\");","map":{"version":3,"names":["React","useState","Calendar","Views","momentLocalizer","moment","withDragAndDrop","jsxDEV","_jsxDEV","localizer","DnDCalendar","_c","CalendarContainer","_s","events","setEvents","id","title","start","Date","end","setHours","getHours","onEventDrop","event","allDay","updatedEvents","map","evt","onDropFromSidebar","draggedEvent","newEvent","getTime","style","height","margin","children","defaultView","MONTH","views","WEEK","selectable","onDropFromOutside","e","dragFromOutsideItem","item","startAccessor","endAccessor","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/isaacvanhorn/Downloads/Code/Organization for ABI/src/Calendar/Calendar.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n// If using drag-and-drop add-on CSS\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\n\n// For built-in DnD (React Big Calendar)\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\n\nconst localizer = momentLocalizer(moment);\nconst DnDCalendar = withDragAndDrop(Calendar);\n\nexport default function CalendarContainer() {\n  const [events, setEvents] = useState([\n    {\n      id: 1,\n      title: 'Existing Event',\n      start: new Date(),\n      end: new Date(new Date().setHours(new Date().getHours() + 1)),\n    },\n  ]);\n\n  // Handle event drop/resizing if needed\n  const onEventDrop = ({ event, start, end, allDay }) => {\n    // Update event in state\n    const updatedEvents = events.map((evt) => {\n      if (evt.id === event.id) {\n        return { ...evt, start, end };\n      }\n      return evt;\n    });\n    setEvents(updatedEvents);\n  };\n\n  // Handle new events dropped from sidebar\n  const onDropFromSidebar = (start, end, draggedEvent) => {\n    const newEvent = {\n      id: new Date().getTime(),\n      title: draggedEvent.title,\n      start,\n      end,\n    };\n    setEvents([...events, newEvent]);\n  };\n\n  return (\n    <div style={{ height: '80vh', margin: '0 auto' }}>\n      <DnDCalendar\n        localizer={localizer}\n        events={events}\n        defaultView={Views.MONTH}\n        views={[Views.MONTH, Views.WEEK]}\n        selectable\n        onEventDrop={onEventDrop}\n        // For resizing events, if desired:\n        // onEventResize={onEventDrop}\n        onDropFromOutside={(e) => {\n          const { start, end, draggedEvent } = e;\n          onDropFromSidebar(start, end, draggedEvent);\n        }}\n        // Must set this prop to true if using onDropFromOutside\n        dragFromOutsideItem={(item) => item}\n        // Adjust this prop to show the week by default if you want:\n        // defaultView={Views.WEEK}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        style={{ minHeight: '600px' }}\n      />\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,EAAEC,KAAK,EAAEC,eAAe,QAAQ,oBAAoB;AACrE,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAO,mDAAmD;AAC1D;AACA,OAAO,sDAAsD;;AAE7D;AACA,OAAOC,eAAe,MAAM,2CAA2C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,MAAMC,SAAS,GAAGL,eAAe,CAACC,MAAM,CAAC;AACzC,MAAMK,WAAW,GAAGJ,eAAe,CAACJ,QAAQ,CAAC;AAACS,EAAA,GAAxCD,WAAW;AAEjB,eAAe,SAASE,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC1C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,CACnC;IACEe,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,gBAAgB;IACvBC,KAAK,EAAE,IAAIC,IAAI,CAAC,CAAC;IACjBC,GAAG,EAAE,IAAID,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACE,QAAQ,CAAC,IAAIF,IAAI,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC9D,CAAC,CACF,CAAC;;EAEF;EACA,MAAMC,WAAW,GAAGA,CAAC;IAAEC,KAAK;IAAEN,KAAK;IAAEE,GAAG;IAAEK;EAAO,CAAC,KAAK;IACrD;IACA,MAAMC,aAAa,GAAGZ,MAAM,CAACa,GAAG,CAAEC,GAAG,IAAK;MACxC,IAAIA,GAAG,CAACZ,EAAE,KAAKQ,KAAK,CAACR,EAAE,EAAE;QACvB,OAAO;UAAE,GAAGY,GAAG;UAAEV,KAAK;UAAEE;QAAI,CAAC;MAC/B;MACA,OAAOQ,GAAG;IACZ,CAAC,CAAC;IACFb,SAAS,CAACW,aAAa,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMG,iBAAiB,GAAGA,CAACX,KAAK,EAAEE,GAAG,EAAEU,YAAY,KAAK;IACtD,MAAMC,QAAQ,GAAG;MACff,EAAE,EAAE,IAAIG,IAAI,CAAC,CAAC,CAACa,OAAO,CAAC,CAAC;MACxBf,KAAK,EAAEa,YAAY,CAACb,KAAK;MACzBC,KAAK;MACLE;IACF,CAAC;IACDL,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEiB,QAAQ,CAAC,CAAC;EAClC,CAAC;EAED,oBACEvB,OAAA;IAAKyB,KAAK,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAS,CAAE;IAAAC,QAAA,eAC/C5B,OAAA,CAACE,WAAW;MACVD,SAAS,EAAEA,SAAU;MACrBK,MAAM,EAAEA,MAAO;MACfuB,WAAW,EAAElC,KAAK,CAACmC,KAAM;MACzBC,KAAK,EAAE,CAACpC,KAAK,CAACmC,KAAK,EAAEnC,KAAK,CAACqC,IAAI,CAAE;MACjCC,UAAU;MACVlB,WAAW,EAAEA;MACb;MACA;MAAA;MACAmB,iBAAiB,EAAGC,CAAC,IAAK;QACxB,MAAM;UAAEzB,KAAK;UAAEE,GAAG;UAAEU;QAAa,CAAC,GAAGa,CAAC;QACtCd,iBAAiB,CAACX,KAAK,EAAEE,GAAG,EAAEU,YAAY,CAAC;MAC7C;MACA;MAAA;MACAc,mBAAmB,EAAGC,IAAI,IAAKA;MAC/B;MACA;MAAA;MACAC,aAAa,EAAC,OAAO;MACrBC,WAAW,EAAC,KAAK;MACjBd,KAAK,EAAE;QAAEe,SAAS,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACvC,EAAA,CA1DuBD,iBAAiB;AAAAyC,GAAA,GAAjBzC,iBAAiB;AAAA,IAAAD,EAAA,EAAA0C,GAAA;AAAAC,YAAA,CAAA3C,EAAA;AAAA2C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}