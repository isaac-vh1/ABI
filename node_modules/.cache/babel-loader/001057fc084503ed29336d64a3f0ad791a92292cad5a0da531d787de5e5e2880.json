{"ast":null,"code":"var _jsxFileName = \"/Users/isaacvanhorn/Downloads/Code/Organization for ABI/src/Calendar/Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst DnDCalendar = withDragAndDrop(Calendar);\n_c = DnDCalendar;\nexport default function CalendarContainer({\n  toggleSidebar\n}) {\n  _s();\n  // State for events\n  const [events, setEvents] = useState([{\n    id: 1,\n    title: 'Existing Event',\n    start: new Date(),\n    end: new Date(new Date().setHours(new Date().getHours() + 1))\n  }]);\n\n  // State to control current date + current view\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [currentView, setCurrentView] = useState(Views.MONTH);\n\n  // Handle moving existing events\n  const onEventDrop = ({\n    event,\n    start,\n    end\n  }) => {\n    const updatedEvents = events.map(evt => evt.id === event.id ? {\n      ...evt,\n      start,\n      end\n    } : evt);\n    setEvents(updatedEvents);\n  };\n\n  // Handle new events dropped from the sidebar\n  const onDropFromSidebar = (start, end, draggedEvent) => {\n    const newEvent = {\n      id: new Date().getTime(),\n      title: draggedEvent.title,\n      start,\n      end\n    };\n    setEvents([...events, newEvent]);\n  };\n\n  // When user clicks a day in the calendar (Month view), switch to Week view for that date\n  const handleSelectSlot = slotInfo => {\n    setCurrentDate(slotInfo.start);\n    setCurrentView(Views.WEEK);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"Bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"menu-toggle\",\n        onClick: toggleSidebar,\n        children: \"\\u2630\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '80vh',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"menu-toggle\",\n        onClick: toggleSidebar,\n        children: \"\\u2630\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DnDCalendar, {\n        className: \"my-custom-calendar\",\n        localizer: localizer,\n        events: events\n        // Make the calendar controlled by currentDate & currentView\n        ,\n        date: currentDate,\n        view: currentView\n        // Show these views\n        ,\n        defaultView: Views.MONTH,\n        views: [Views.MONTH, Views.WEEK, Views.DAY],\n        selectable: true\n        // Called when user drags an event to a new time\n        ,\n        onEventDrop: onEventDrop\n        // Called when user drags from the sidebar into the calendar\n        ,\n        onDropFromOutside: ({\n          start,\n          end,\n          draggedEvent\n        }) => onDropFromSidebar(start, end, draggedEvent)\n        // Updates currentDate if user navigates (clicks next/prev)\n        ,\n        onNavigate: newDate => setCurrentDate(newDate)\n        // Updates currentView if user switches between Month/Week/Day\n        ,\n        onView: newView => setCurrentView(newView)\n        // Required for dropping from outside\n        ,\n        dragFromOutsideItem: item => item,\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        style: {\n          minHeight: '600px'\n        }\n        // When user clicks a day (in Month view), go to Week view on that date\n        ,\n        onSelectSlot: handleSelectSlot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarContainer, \"i1EKqo3gGNjVrnIlNJ8Rs0zE5fM=\");\n_c2 = CalendarContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"DnDCalendar\");\n$RefreshReg$(_c2, \"CalendarContainer\");","map":{"version":3,"names":["React","useState","Calendar","Views","momentLocalizer","moment","withDragAndDrop","jsxDEV","_jsxDEV","localizer","DnDCalendar","_c","CalendarContainer","toggleSidebar","_s","events","setEvents","id","title","start","Date","end","setHours","getHours","currentDate","setCurrentDate","currentView","setCurrentView","MONTH","onEventDrop","event","updatedEvents","map","evt","onDropFromSidebar","draggedEvent","newEvent","getTime","handleSelectSlot","slotInfo","WEEK","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","height","margin","date","view","defaultView","views","DAY","selectable","onDropFromOutside","onNavigate","newDate","onView","newView","dragFromOutsideItem","item","startAccessor","endAccessor","minHeight","onSelectSlot","_c2","$RefreshReg$"],"sources":["/Users/isaacvanhorn/Downloads/Code/Organization for ABI/src/Calendar/Calendar.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\n\nconst localizer = momentLocalizer(moment);\nconst DnDCalendar = withDragAndDrop(Calendar);\n\nexport default function CalendarContainer({ toggleSidebar }) {\n  // State for events\n  const [events, setEvents] = useState([\n    {\n      id: 1,\n      title: 'Existing Event',\n      start: new Date(),\n      end: new Date(new Date().setHours(new Date().getHours() + 1)),\n    },\n  ]);\n\n  // State to control current date + current view\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [currentView, setCurrentView] = useState(Views.MONTH);\n\n  // Handle moving existing events\n  const onEventDrop = ({ event, start, end }) => {\n    const updatedEvents = events.map((evt) =>\n      evt.id === event.id ? { ...evt, start, end } : evt\n    );\n    setEvents(updatedEvents);\n  };\n\n  // Handle new events dropped from the sidebar\n  const onDropFromSidebar = (start, end, draggedEvent) => {\n    const newEvent = {\n      id: new Date().getTime(),\n      title: draggedEvent.title,\n      start,\n      end,\n    };\n    setEvents([...events, newEvent]);\n  };\n\n  // When user clicks a day in the calendar (Month view), switch to Week view for that date\n  const handleSelectSlot = (slotInfo) => {\n    setCurrentDate(slotInfo.start);\n    setCurrentView(Views.WEEK);\n  };\n\n  return (\n    <div>\n      <section className=\"Bar\">\n        <button className=\"menu-toggle\" onClick={toggleSidebar}>\n          ☰\n        </button>\n        <h1>Schedule</h1>\n      </section>\n\n      <div style={{ height: '80vh', margin: '0 auto' }}>\n        <button className=\"menu-toggle\" onClick={toggleSidebar}>\n          ☰\n        </button>\n\n        <DnDCalendar\n          className=\"my-custom-calendar\"\n          localizer={localizer}\n          events={events}\n          // Make the calendar controlled by currentDate & currentView\n          date={currentDate}\n          view={currentView}\n          // Show these views\n          defaultView={Views.MONTH}\n          views={[Views.MONTH, Views.WEEK, Views.DAY]}\n          selectable\n          // Called when user drags an event to a new time\n          onEventDrop={onEventDrop}\n          // Called when user drags from the sidebar into the calendar\n          onDropFromOutside={({ start, end, draggedEvent }) =>\n            onDropFromSidebar(start, end, draggedEvent)\n          }\n          // Updates currentDate if user navigates (clicks next/prev)\n          onNavigate={(newDate) => setCurrentDate(newDate)}\n          // Updates currentView if user switches between Month/Week/Day\n          onView={(newView) => setCurrentView(newView)}\n          // Required for dropping from outside\n          dragFromOutsideItem={(item) => item}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          style={{ minHeight: '600px' }}\n          // When user clicks a day (in Month view), go to Week view on that date\n          onSelectSlot={handleSelectSlot}\n        />\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}